---
- name: Set operatorVersion and targetVersion
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    status:
      operatorVersion: "{{ operator_version }}"
      targetVersion: "{{ operator_version }}"

- name: Create namespace for golden images
  k8s:
    state: present
    definition: "{{ lookup('template', 'kubevirt-os-images-namespace.yaml.j2') | from_yaml }}"
    merge_type: ['merge', 'json']

- name: Create RBAC for Golden Images
  k8s:
    state: present
    resource_definition:
    - "{{ lookup('template', 'kubevirt-os-images-viewrole.yaml.j2') | from_yaml }}"
    - "{{ lookup('template', 'kubevirt-os-images-viewrolebinding.yaml.j2') | from_yaml }}"
    - "{{ lookup('template', 'kubevirt-os-images-editrole.yaml.j2') | from_yaml }}"
    merge_type: ['merge', 'json']

# tasks file for KubevirtCommonTemplatesBundle
- name: Install VM templates
  k8s:
    state: present
    namespace: "{{ cr_info.metadata.namespace }}"
    merge_type: ['merge', 'json']
    resource_definition: "{{ lookup('file', 'common-templates-'+ version +'.yaml') }}"
  register: ct_status

# Get all templates
- name: Fetching all templates
  set_fact:
    templates: "{{ lookup('k8s', api_version=ct_status.result.results[0].result.apiVersion, kind='templates') }}"

- block:
  - name: Fetch old CR
    set_fact:
      old_cr: "{{ lookup('k8s', api_version='kubevirt.io/v1', kind='KubevirtCommonTemplatesBundle') }}"
  rescue:
  - name: Fail if k8s lookup plugin errored
    fail:
      msg: "An error occured while fetching the old CR: {{ ansible_failed_result.msg }}"
    when:
    # This is the error that is raised when a resource is not found
    # see: https://github.com/ansible-collections/community.kubernetes/blob/9fb808c7f37caea0300db1b466117ad0367db492/plugins/module_utils/common.py#L230
    # this means there is no old CR to take ownership from
    - '"Failed to find exact match" not in ansible_failed_result.msg'

# If the old cr exists, it would have a metadata field
- name: Check if the old CR exists
  set_fact:
    old_cr_exists: "{{ true if (old_cr is defined) and (old_cr.metadata | default(None)) != None else false }}"

- name: Filter for templates owned by the old cr
  set_fact:
    old_cr_templates: "{{ templates | k8s_owned_by(old_cr) }}"
  when: "{{ old_cr_exists==true }}"

# Inject ownerReferences
- name: Inject owner references for KubevirtCommonTemplatesBundle
  k8s:
    state: present
    namespace: "{{ cr_info.metadata.namespace }}"
    merge_type: ['merge', 'json']
    resource_definition: "{{ old_cr_templates | k8s_inject_ownership(cr_info) }}"
  when: "{{ (old_cr_templates is defined) and (old_cr_templates | length > 0) }}"

- name: "Count all new templates in file"
  set_fact:
    new_templates: "{{ lookup('file', 'common-templates-'+ version +'.yaml').split('\n---\n') | select('search', '(^|\n)[^#]') | list | length }}"

- name: "Set label"
  set_fact:
    label: "template.kubevirt.io/version={{ version }}"

- name: "Get all templates"
  set_fact:
    deployed_templates_after: "{{ lookup('k8s', api_version=ct_status.result.results[0].result.apiVersion, kind='template', label_selector=label) | length }}"

- name: "Set Available status"
  set_fact:
    available: "{{ true if new_templates <= deployed_templates_after else false }}"

- name: Set progressing condition
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    conditions:
    - type: Progressing
      status: "False"
      reason: "progressing"
      message: "Templates progressing (deployed templates: {{ deployed_templates_after }}, desired deployed templated: {{ new_templates }})."

- name: Set available condition
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    conditions:
    - type: Available
      status: "True"
      reason: "available"
      message: "Common templates available (deployed templates: {{ deployed_templates_after }}, desired deployed templated: {{ new_templates }})."

- name: Set degraded condition
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    conditions:
    - type: Degraded
      status: "False"
      reason: "degraded"
      message: "Templates degraded (deployed templates: {{ deployed_templates_after }}, desired deployed templated: {{ new_templates }})."

# Update observerVersion when the CR is Available to indicate a successfull upgrade
- name: Set observedVersion
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    status:
      observedVersion: "{{ operator_version }}"
  when: "{{ available==true }}"
