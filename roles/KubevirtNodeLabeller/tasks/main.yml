---
- name: Set operatorVersion and targetVersion
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    status:
      operatorVersion: "{{ operator_version }}"
      targetVersion: "{{ operator_version }}"

- name: Create the node labeller roles
  k8s:
    state: present
    definition: "{{ item | from_yaml }}"
    apply: yes
  with_items: "{{ lookup('template', 'kubevirt-node-labeller-roles.yaml.j2').split('\n---\n') | select('search', '(^|\n)[^#]') | list }}"
  register: roles

- name: Create the node labeller daemon set
  k8s:
    state: present
    definition: "{{ lookup('template', 'kubevirt-node-labeller-ds.yaml.j2') | from_yaml }}"
    apply: yes
  register: nl

# Actively inject owner references in order to adopt existing resources during an upgrade
- name: Inject owner references for KubevirtNodeLabellerBundle
  include_role: 
    name: ClaimOwnership
  vars:
    object: "{{ item }}"
    owner: "{{ cr_info }}"
  with_list:
  - "{{ roles.results[0].result }}" # ServiceAccount
  - "{{ roles.results[4].result }}" # ConfigMap
  - "{{ nl.result }}"               # DaemonSet

- name: "Refresh node-labeller var"
  k8s:
    state: present
    definition: "{{ lookup('k8s', kind=nl.result.kind, namespace=nl.result.metadata.namespace, resource_name=nl.result.metadata.name) | from_yaml }}"
  register: nl_status

- name: "Set Progressing status"
  set_fact:
    progressing: "{{ true if nl_status.result.status.desiredNumberScheduled != nl_status.result.status.numberReady else false }}"

- name: "Set Available status"
  set_fact:
    available: "{{ true if nl_status.result.status.desiredNumberScheduled == nl_status.result.status.numberReady else false }}"

- name: "Set Degraded status"
  set_fact:
    degraded: "{{ true if nl_status.result.status.desiredNumberScheduled != nl_status.result.status.numberReady else false }}"

- name: Set progressing condition
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    conditions:
    - type: Progressing
      status: "{{ 'True' if progressing else 'False' }}"
      reason: "progressing"
      message: "Node-labeller is progressing (ready pods: {{ nl_status.result.status.numberReady }}, desired pods: {{ nl_status.result.status.desiredNumberScheduled }})."

- name: Set available condition
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    conditions:
    - type: Available
      status: "{{ 'True' if available else 'False' }}"
      reason: "available"
      message: "Node-labeller is available (ready pods: {{ nl_status.result.status.numberReady }}, desired pods: {{ nl_status.result.status.desiredNumberScheduled }})."

- name: Set degraded condition 
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    conditions:
    - type: Degraded
      status: "{{ 'True' if degraded else 'False' }}"
      reason: "degraded"
      message: "Node-labeller is degraded (ready pods: {{ nl_status.result.status.numberReady }}, desired pods: {{ nl_status.result.status.desiredNumberScheduled }})."

# Update observerVersion when the CR is Available to indicate a successfull upgrade
- name: Set observedVersion
  operator_sdk.util.k8s_status:
    api_version: "{{ cr_info.apiVersion }}"
    kind: "{{ cr_info.kind }}"
    name: "{{ cr_info.metadata.name }}"
    namespace: "{{ cr_info.metadata.namespace }}"
    status:
      observedVersion: "{{ operator_version }}"
  when: "{{ available==true }}"

- name: Reque if KubevirtNodeLabellerBundle not available
  fail:
    msg: "Requeing until KubevirtNodeLabellerBundle is available"
  when: nl_status.result.status.desiredNumberScheduled != nl_status.result.status.numberReady
